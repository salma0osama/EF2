// <auto-generated />
using System;
using ExaminationSystemEFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examination_SystemEFCore.Migrations
{
    [DbContext(typeof(ExaminationDbContext))]
    partial class ExaminationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExaminationSystemEFCore.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaximumDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CK_Course_MaximumDegree_Positive", "MaximumDegree > 0");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basic programming concepts",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Introduction to Programming"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Algorithms and structures",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Data Structures"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Relational databases and SQL",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Database Systems"
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Exam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalMarks")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StartDate");

                    b.ToTable("Exams", t =>
                        {
                            t.HasCheckConstraint("CK_Exam_EndDateAfterStart", "EndDate > StartDate");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseID = 1,
                            Description = "Midterm exam covering basics",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            EndDate = new DateTime(2024, 3, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Intro Programming Midterm",
                            TotalMarks = 50m
                        },
                        new
                        {
                            ID = 2,
                            CourseID = 3,
                            Description = "Final exam for DB course",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            EndDate = new DateTime(2024, 6, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 2,
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Database Systems Final",
                            TotalMarks = 100m
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.ExamAttempt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("IsGraded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("StartTime");

                    b.HasIndex("StudentID");

                    b.ToTable("ExamAttempts");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "omar.khaled@example.com",
                            HireDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Prof. Omar Khaled",
                            Specialization = "Software Engineering"
                        },
                        new
                        {
                            ID = 2,
                            Email = "laila.mansour@example.com",
                            HireDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Dr. Laila Mansour",
                            Specialization = "Databases"
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("InstructorID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("InstructorCourses");

                    b.HasData(
                        new
                        {
                            InstructorID = 1,
                            CourseID = 1,
                            AssignedDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            InstructorID = 2,
                            CourseID = 3,
                            AssignedDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.ToTable("Questions", t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator<int>("QuestionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "Salma@gmail.com",
                            EnrollmentDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Salma Osama",
                            StudentNumber = "s1001"
                        },
                        new
                        {
                            ID = 2,
                            Email = "Sara@gmail.com",
                            EnrollmentDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Sara Ahmed",
                            StudentNumber = "s1002"
                        },
                        new
                        {
                            ID = 3,
                            Email = "Omar@gmail.com",
                            EnrollmentDate = new DateTime(2024, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Omar Ali",
                            StudentNumber = "s1003"
                        },
                        new
                        {
                            ID = 4,
                            Email = "Menna@gmail.com",
                            EnrollmentDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Menna Khaled",
                            StudentNumber = "s1004"
                        },
                        new
                        {
                            ID = 5,
                            Email = "Bilal@gmail.com",
                            EnrollmentDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Bilal Hassan",
                            StudentNumber = "s1005"
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.StudentAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("BooleanAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("ExamAttemptID")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarksObtained")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ExamAttemptID");

                    b.HasIndex("QuestionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.StudentCourse", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentID = 1,
                            CourseID = 1,
                            EnrollmentDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        },
                        new
                        {
                            StudentID = 2,
                            CourseID = 1,
                            EnrollmentDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        },
                        new
                        {
                            StudentID = 3,
                            CourseID = 3,
                            EnrollmentDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.EssayQuestion", b =>
                {
                    b.HasBaseType("ExaminationSystemEFCore.Question");

                    b.Property<string>("GradingCriteria")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaxWordCount")
                        .HasColumnType("int");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 2,
                            Marks = 10m,
                            QuestionText = "Explain normalization and its types.",
                            QuestionType = 2,
                            GradingCriteria = "Clarity, completeness, examples",
                            MaxWordCount = 500
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("ExaminationSystemEFCore.Question");

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 1,
                            Marks = 5m,
                            QuestionText = "What is a variable?",
                            QuestionType = 0,
                            CorrectOption = "A",
                            OptionA = "A place to store data",
                            OptionB = "A function",
                            OptionC = "A class",
                            OptionD = "An operator"
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("ExaminationSystemEFCore.Question");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 2,
                            Marks = 5m,
                            QuestionText = "SQL is used to manage relational databases.",
                            QuestionType = 1,
                            CorrectAnswer = true
                        });
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Exam", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminationSystemEFCore.Instructor", "Instructor")
                        .WithMany("Exams")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.ExamAttempt", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.Exam", "Exam")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminationSystemEFCore.Student", "Student")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.InstructorCourse", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.Course", "Course")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminationSystemEFCore.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Question", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.StudentAnswer", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.ExamAttempt", "ExamAttempt")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ExamAttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminationSystemEFCore.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamAttempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.StudentCourse", b =>
                {
                    b.HasOne("ExaminationSystemEFCore.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminationSystemEFCore.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Exam", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.ExamAttempt", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Instructor", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorCourses");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Question", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ExaminationSystemEFCore.Student", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
